# 128K SMC的ca65链接器配置


# 定义物理内存区域
# 内存区域的名称可以不同，但是最好保持一致
# LOWROM 卡带的地址范围： $00:$0000 -> $FF:FFFF 中所有BANK的 $8000-$FFFF 区域，即半个BANK
# 事实上所有LOWROM游戏都是使用 $80:$8000 -> $FF:FFFF 这个范围
MEMORY {
    # 零页数据内存
    # 这里规划了内存前256字节的空间，编译器是面前多种CPU的，这里是针对SFC的特性声明了此区域
    ZEROPAGE:   start =      0, size =  $100;
    # 用于存放未初始化变量的数据
    BSS:        start =   $200, size = $1800;
    # 为LowROM中所有用到的BANK命名
    # 事实上CPU可寻址的是$00-$FF:$0000-$FFFF，但LowROM只使用每个BANK中的$8000-$FFFF
    # 同时也要注意的是，这里定义的应该是一个非标准的ROM，因为没有从 $80:8000 开始定义
    # fill = yes 表示在链接时，如果没有定义的区域，会自动填充0(也有说是0xFF)保证数据对齐
    # 主ROM区域，即ROM的第一个BANK（同时也是内存空间中第一个BANK的高位32K空间$8000-$FFFF）
    ROM:        start =  $8000, size = $8000, fill = yes;
    # 额外的3个BANK，每个都是 $8000-$FFFF (32KB)，额外的ROM银行
    BANK1:      start = $18000, size = $8000, fill = yes;
    BANK2:      start = $28000, size = $8000, fill = yes;
    BANK3:      start = $38000, size = $8000, fill = yes;
}

# 定义逻辑段，指定代码和数据的存放位置
# 有一些特殊的段：
# STARTUP：程序的入口点
# DATA：数据段
SEGMENTS {
    # 放在零页内存
    # load = ZEROPAGE 表示放在ZEROPAGE区域
    # type = zp 表示这是零页数据，编译器会按照这个类型来处理
    ZEROPAGE:   load = ZEROPAGE,    type = zp;
    # 未初始化数据， 256字节对齐
    # 启动时此区域会自动清零，指示编译器用来分配未初始化的全局和静态变量
    BSS:        load = BSS,         type = bss, align = $100;
    # 以下定义的各种段都是加载到ROM区域
    # 总得来说，就是在第一个BANK内规划了各种段地址分配
    # 编译器会根据源码中的变量和函数等各种定义，将这些数据放到对应的段中
    # 程序代码，放在主ROM区域， 32KB对齐
    CODE:       load = ROM,         align = $8000;
    # 只读数据，放在主ROM区域
    RODATA:     load = ROM;
    # ROM头部，位于 $FFC0-$FFD4（固定）， ROM的名称部分
    HEADER:     load = ROM,         start =  $FFC0;
    # ROM信息，位于 $FFD5-$FFDF（固定，可选），ROM的信息部分
    # optional = yes 表示这个段是可选的，如果没有定义，链接器会忽略
    ROMINFO:    load = ROM,         start =  $FFD5, optional = yes;
    # 中断向量，位于 $FFE0-$FFFF, 32字节
    # 向量表指向的BANK是固定的，每个向量(即函数指针)使用 2 字节
    # SFC 定义了12个中断向量，每个向量占用2字节，共24字节，剩下的8字节是保留的
    VECTORS:    load = ROM,         start =  $FFE0;

    # 额外的3个BANK，每个8KB对齐，都是可选的
    BANK1:      load = BANK1,       align = $8000, optional = yes;
    BANK2:      load = BANK2,       align = $8000, optional = yes;
    BANK3:      load = BANK3,       align = $8000, optional = yes;
}
